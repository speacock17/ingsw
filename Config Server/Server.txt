Il server è stato progettato con il pattern DAO combinato con il pattern Factory:
File XML per ogni model individuato.
I file xml presentano un elemento <entity> che indica il model a cui si riferiscono
e un elemento <storage> che indica l'implementazione utilizzata

Esempio:		UtenteModel.xml
<data>
	<entity>
		Utente
	</entity>
	<storage>
		PostgreSQL
	</storage>
</data>

Dependency Injection:
Una classe Factory per ogni Model, che implementa un'interfaccia FactoryDAO di cui implementa il metodo getImplementation()

Dependency Injection:
Le interfacce DAO presentano 1 o più implementazioni in base allo storage indicato dalla classe factory 
e ottenuto richiamando il metodo statico '<modelName>Factory.getImplementation()'

Le interfacce Dao, per ridurre l'accoppiamento, presentano metodi slegati dalle istanze delle entità individuate

Le entità vengono istanziae automaticamente da Spring nelle richieste ricevute dal client, attraverso l'annotazione @RequestBody
Ciascun @RequestBody è legato a dei DTO (Data Transfer Object) che modellano le entità interamente o parzialmente

Ottenuta l'implementazione corretta dei DAO attraverso le factory corrispondenti, i controller eseguono operazioni sul Model