--Tipo utente
Create type tipoUtente as enum
('Admin', 'Supervisor', 'AddSala', 'AddCucina');

--Unità di misura
Create type UnitaDiMisura as enum
('Litro', 'Chilo', 'Pezzo');


--CREAZIONE TABELLE


--Creazione tabella utente
Create table Utente(
Nome varchar(50) NOT NULL,
Cognome varchar(50) NOT NULL,
Username varchar(50) NOT NULL,
Pass varchar(50) NOT NULL,
Ruolo tipoUtente NOT NULL,
PrimoAccesso bool DEFAULT false,
CONSTRAINT pk_user PRIMARY KEY(Username),
CONSTRAINT len_nome CHECK(Length(Nome)>=1),
CONSTRAINT len_cognome CHECK(Length(Cognome)>=1),
CONSTRAINT len_username CHECK(Length(Username)>=1),
CONSTRAINT len_pass CHECK(Length(Pass)>=6)
);

--Creazione tabella dispensa
Create table Dispensa(
Nome varchar(50) NOT NULL,
Descrizione varchar(500) NOT NULL,
CostoAcquisto float NOT NULL,
UdM UnitaDiMisura NOT NULL,
Quantita float NOT NULL,
SogliaCritica float NOT NULL,
CONSTRAINT pk_disp PRIMARY KEY(Nome),
CONSTRAINT len_nome CHECK(Length(Nome)>=1),
CONSTRAINT len_descrizione CHECK(Length(Descrizione)>=1)
);

--Creazione tabella avvisi
Create table Avviso(
IdAvviso integer NOT NULL,
Oggetto varchar(50) NOT NULL,
Testo varchar(500) NOT NULL,
DataCreazione date NOT NULL default current_date,
CONSTRAINT pk_avviso PRIMARY KEY (IdAvviso),
CONSTRAINT len_oggetto CHECK(Length(Oggetto)>=1),
CONSTRAINT len_testo CHECK(Length(Testo)>=1)
);

--Creazione tabella mittente (utente)
Create table MittenteU(
Mittente varchar(50) NOT NULL,
IdAvviso integer NOT NULL,
CONSTRAINT fk_mitt FOREIGN KEY (Mittente) 
	REFERENCES Utente(Username)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT fk_idavv FOREIGN KEY (IdAvviso) 
	REFERENCES Avviso(IdAvviso)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT unique_comboU UNIQUE (Mittente, IdAvviso)
);

--Creazione tabella mittente (dispensa)
--Gestione inserimento in questa tabella delegato a GG in Java
Create table MittenteD(
Mittente varchar(50) NOT NULL,
IdAvviso integer NOT NULL,
CONSTRAINT fk_mittD FOREIGN KEY (Mittente) 
	REFERENCES Dispensa(Nome)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT fk_idavv FOREIGN KEY (IdAvviso) 
	REFERENCES Avviso(IdAvviso)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT unique_comboD UNIQUE (Mittente, IdAvviso)
);

--Creazione tabella bacheca
Create table Bacheca(
Visualizzato boolean NOT NULL,
Nascosto boolean NOT NULL,
IdAvviso integer NOT NULL,
Destinatario varchar(50) NOT NULL,
CONSTRAINT fk_idavvBach FOREIGN KEY (IdAvviso) 
	REFERENCES Avviso(IdAvviso)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT fk_dest FOREIGN KEY (Destinatario)
	REFERENCES Utente(Username)
	ON UPDATE CASCADE
	ON DELETE CASCADE
);

--Creazione tabella categoria
Create table Categoria(
Nome varchar(50) NOT NULL,
PostoMenu integer DEFAULT NULL,
CONSTRAINT pk_cat PRIMARY KEY (Nome),
CONSTRAINT len_nome CHECK(Length(Nome)>=1)
);


--Creazione tabella Menù
Create table Menu(
Nome varchar(100) NOT NULL,
Descrizione varchar(500) NOT NULL,
Costo float NOT NULL,
Allergeni varchar(500) NOT NULL,
Categoria varchar(50) DEFAULT NULL,
PostoCategoria integer DEFAULT NULL,
Constraint pk_nome PRIMARY KEY (Nome),
CONSTRAINT len_nome CHECK(Length(Nome)>=1),
CONSTRAINT len_descrizione CHECK(Length(Descrizione)>=1),
CONSTRAINT len_allergeni CHECK(Length(Allergeni)>=1),
CONSTRAINT fk_cat FOREIGN KEY (Categoria)
	REFERENCES Categoria(Nome)
	ON UPDATE CASCADE
	ON DELETE SET NULL
);

--Creazione tabella Ingredienti
Create table Ingredienti(
Quantita float NOT NULL,
UdM UnitaDiMisura NOT NULL,
ElementoMenu varchar(100) NOT NULL,
ElementoDispensa varchar(50) NOT NULL,
CONSTRAINT fk_menu FOREIGN KEY (ElementoMenu)
	REFERENCES Menu(Nome)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT fk_disp FOREIGN KEY (ElementoDispensa)
	REFERENCES Dispensa(Nome)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
CONSTRAINT UniqueDispMenu 
	UNIQUE ( ElementoMenu , ElementoDispensa )
);

--Creazione tabella lingua straniera
Create table LinguaStraniera(
Lingua varchar(50) NOT NULL,
NomeProdotto varchar(100) NOT NULL,
DescrizioneProdotto varchar(500) NOT NULL,
ElementoMenu varchar(100) NOT NULL,
CONSTRAINT len_lingua CHECK(Length(Lingua)>=1),
CONSTRAINT len_nome CHECK(Length(NomeProdotto)>=1),
CONSTRAINT len_descrizione CHECK(Length(DescrizioneProdotto)>=1),
CONSTRAINT fk_lingua FOREIGN KEY (ElementoMenu)
	REFERENCES Menu(Nome)
	ON UPDATE CASCADE
	ON DELETE CASCADE
);

--Creazione tabella Ordine
Create table Ordine(
IdOrdine integer NOT NULL,
NumeroTavolo integer NOT NULL,
Prodotto varchar(100) NOT NULL,
CONSTRAINT pk_ordine PRIMARY KEY (IdOrdine),
CONSTRAINT fk_prod FOREIGN KEY (Prodotto)
	REFERENCES Menu(Nome)
	ON UPDATE CASCADE
	ON DELETE CASCADE
);

--Cast per le enumeration
CREATE CAST (varchar AS tipoUtente) WITH INOUT AS IMPLICIT;
CREATE CAST (varchar AS UnitaDiMisura) WITH INOUT AS IMPLICIT;

--Sequenza per i codici

-- codice avviso
Create sequence codAvviso
start 1
increment 1
owned by Avviso.IdAvviso;

-- codice ordine
Create sequence codOrdine
start 1
increment 1
owned by Ordine.IdOrdine;

--Viste
-- bacheca estesa degli avvisi from utenti
create view BachecaEstesaU as 
(
	select a.IdAvviso, a.oggetto, a.testo, a.DataCreazione, m.Mittente, c.Visualizzato, c.Nascosto, c.Destinatario
	from Avviso a, MittenteU m, Bacheca c
	where a.IdAvviso = m.IdAvviso 
		and m.IdAvviso = c.IdAvviso
);

-- bacheca estesa degli avvisi from dispensa
create view BachecaEstesaD as 
(
	select a.IdAvviso, a.oggetto, a.testo, a.DataCreazione, m.Mittente, c.Visualizzato, c.Nascosto, c.Destinatario
	from Avviso a, MittenteD m, Bacheca c
	where a.IdAvviso = m.IdAvviso 
		and m.IdAvviso = c.IdAvviso
);

-- TRIGGER 
CREATE FUNCTION check_udm() RETURNS trigger AS $$
DECLARE
cursore CURSOR FOR SELECT * FROM ingredienti as ing, dispensa as d WHERE ing.ElementoDispensa = d.Nome;
BEGIN
FOR record IN cursore LOOP
	UPDATE ingredienti
	SET udm = new.udm;
END LOOP;
RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER trigger_udm
AFTER UPDATE OF udm ON dispensa
FOR EACH ROW
EXECUTE PROCEDURE check_udm();